FORMAT: 1A
HOST: http://sl-timetracker.apiblueprint.org/

# SL-TimeTracker

Backend endpoints for the Service Learning Time Tracker project.

## User [/user/{user_id}]

### Get User Information [GET]

Takes a User email and returns the associated User.

+ Request (application/json)

        {
            "email": "kename.f@husky.neu.edu",
        }

+ Response 200 (application/json)
       
        [
            {
                "id": 00000,
                "name": "Fa Kename",
                "username": "kename.f@husky.neu.edu",
                "role": "student",
                "courses": [
                    00000,
                    11111,
                    22222,
                    33333,
                ],
                "projects": [
                    00000,
                ]
            }
        ]

### Create a new User [POST]

You may create a new User using this action. It takes a JSON
object containing a name, a username (email address), a role for the user (student/professor/admin),
a list of course IDs, and a list of project IDs.

If the role of the User is noted as "student", the courses array will refer to the list of courses that User is currently enrolled in.

If the role of the User is noted as "professor", the courses array will refer to the list of courses that User is currently teaching. In addition,
when the User's role is "professor", the project array will be left blank.

If the role of the User is noted as "admin", the courses array and projects array will be left blank.


+ Request (application/json)

        {
            "name": "Fa Kename",
            "username": "kename.f@husky.neu.edu",
            "role": "student",
            "courses": [
                00000,
                11111,
                22222,
                33333,
            ],
            "projects": [
                00000
            ],
        }

+ Response 201 (application/json)

    + Headers

            Location: /user/{user_id}

    + Body

            {
                "id": 00000,
                "name": "Fa Kename",
                "username": "kename.f@husky.neu.edu",
                "role": "student",
                "courses": [
                    00000,
                    11111,
                    22222,
                    33333,
                ],
                "projects": [
                    00000
                ]
            }
            
### Update a User [PUT]

Updates a User with the given fields. Have to provide all the fields, provide exisiting data if there is no change

+ Request (application/json)
        
        {
            "id": 00000,
            "name": "Fa Kename",
            "username": "kename.f@husky.neu.edu",
            "role": "student",
            "courses": [
                00000,
                11111,
                44444,
                55555,
            ],
            "projects": [],
        }

+ Response 200

## Expanded User Info [/user/{user_id}/expanded]

### Get User Expanded Info [GET]

Get an expanded version of the user, including full name of courses and projects. Takes User ID.

+ Request (application/json)

        {
            "email": "kename.f@husky.neu.edu",
        }

+ Response 200 (application/json)
       
        [
            {
                "id": 00000,
                "name": "Fa Kename",
                "username": "kename.f@husky.neu.edu",
                "role": "student",
                "courses": [
                    "Software Development",
                ],
                "projects": [
                    "Service-Learning Time Tracker",
                ]
            }
        ]

## Course Collection [/courses]

### Get all Courses [GET]

Returns all IDs of all existing courses.

+ Response 200 (application/json)

        [
            {
                "ids": [
                    00000,
                    11111,
                    22222,
                    33333
                ]
            }
        ]

## Course Name Collection [/courses/names]

### Get Course Names Collection [GET]

Returns names of all courses.

+ Response 200 (application/json)

        [
            {
                "names": [
                    "Algorithms and Data",
                    "Fundamentals of Computer Science 1",
                    "Software Development",
                ]
            }
        ]
   
## Course [/course/{course_id}]

### Get Course Information [GET]

Takes a Course ID and returns the associated Course.

+ Request (application/json)

        {
            "id": 00000
        }

+ Response 200 (application/json)
       
        [
            {
                "id": 00000,
                "course number": "CS4500",
                "course name": "Software Development",
                "semester": "fall2016",
                "instructors": [
                    00000,
                    11111,
                    22222
                ],
                "meeting times": {
                    "days": "MWR",
                    "start time": "9:50:00",
                    "end time": "11:30:00",
                }
            }
        ]

### Create a new Course [POST]

You may create a new Course using this action. It takes a JSON 
object containing a course number, course name, semester, a list of Professors, and meeting times.

+ Request (application/json)

        {
            "course number": "CS4500",
            "course name": "Software Development",
            "semester": "fall2016",
            "instructors": [
                00000,
                11111,
                22222
            ],
            "meeting times": {
                "days": "MWR",
                "start time": "9:50:00",
                "end time": "11:30:00",
            }
        }
        
+ Response 201 (application/json)

    + Headers

            Location: /course/{course_id}

    + Body

            {
                "id": 00000,
                "course number": "CS4500",
                "course name": "Software Development",
                "semester": "fall2016",
                "instructors": [
                    00000,
                    11111,
                    22222
                ],
                "meeting times": {
                    "days": "MWR",
                    "start time": "9:50:00",
                    "end time": "11:30:00",
                }
            }
            
### Update a Course [PUT]

Updates a Course with the given fields, must provide all fields.

+ Request (application/json)

        {
            "id": 00000,
            "course number": "CS4500",
            "course name": "Software Development",
            "semester": "spri2016",
            "instructors": [
                00000,
                11111,
            ],
            "meeting times": {
                "days": "MWR",
                "start time": "9:50:00",
                "end time": "11:30:00",
            }
        }

+ Response 200

## Expanded Course Info [/course/{course_id}/expanded]

### Get Course Expanded Info [GET]

Get Course info with full instructor names. Takes Course ID.

+ Request (application/json)

        {
            "id": 00000
        }

+ Response 200 (application/json)
       
        [
            {
                "id": 00000,
                "course number": "CS4500",
                "course name": "Software Development",
                "semester": "fall2016",
                "instructors": [
                    "Michael Weintraub",
                    "Joyesh Kakkar",
                    "Smitha Bangalore Naresh"
                ],
                "meeting times": {
                    "days": "MWR",
                    "start time": "9:50:00",
                    "end time": "11:30:00",
                }
            }
        ]

## Project [/project/{project_id}]

### Get a Project [GET]

Takes a Project ID and returns the associated Project.

+ Request (application/json)

        {
            "id": 00000
        }

+ Response 200 (application/json)
       
        [
            {
                "id": 00000,
                "name": "Service-Learning Time Tracker",
                "community partner": 00000,
                "description": "Creating a new system for tracking the hours worked by students doing service learning.",
                "start date": "2016-09-01 00:00:00",
                "end date": "2016-12-31 23:59:59.999999",
                "location":
                    {
                        "latitude": 40.0,
                        "longitude": 40.0,
                    },
            }
        ]

### Create a new Project [POST]

You may create a new Project using this action. It takes a JSON
object containing a name (optional), Community Partner ID, a description (optional), 
a start date, an end date, and a location (long/lat pair in JSON format).


+ Request (application/json)

        {
            "name": "Service-Learning Time Tracker",
            "community partner": 00000,
            "description": "Creating a new system for tracking the hours worked by students doing service learning.",
            "start date": "2016-09-01 00:00:00",
            "end date": "2016-12-31 23:59:59.999999",
            "location":
                {
                    "latitude": 40.0,
                    "longitude": 40.0,
                },
        }

+ Response 201 (application/json)

    + Headers

            Location: /project/{project_id}

    + Body
    
            {
                "id": 00000,
                "name": "Service-Learning Time Tracker",
                "community partner": 00000,
                "description": "Creating a new system for tracking the hours worked by students doing service learning.",
                "start date": "2016-09-01 00:00:00",
                "end date": "2016-12-31 23:59:59.999999",
                "location":
                    {
                        "latitude": 40.0,
                        "longitude": 40.0,
                    },
            }
            
### Update a Project [PUT]

Updates a Project with the given fields, must provide all fields.

+ Request (application/json)

        {
            "id": 00000,
            "name": "Service-Learning Time Tracker",
            "community partner": 00000,
            "description": "Creating a new system for tracking the hours worked by students doing service learning. Some extra text here",
            "start date": "2016-09-01 00:00:00",
            "end date": "2016-12-31 23:59:59.999999",
            "location":
                {
                    "latitude": 30.0,
                    "longitude": 30.0,
                },
        }

+ Response 200

## Community Partner [/communityPartner/{communityPartner_id}]

### Get a Community Partner [GET]

Takes a Community Partner ID and returns the associated Community Partner.

+ Request (application/json)

        {
            "id": 00000
        }

+ Response 200 (application/json)
       
        [
            {
                "id": 00000,
                "name": "Northeastern University Service Learning Department"
            }
        ]

### Create a new Community Partner [POST]

You may create a new Community Partner using this action. It takes a JSON
object containing a name of a Community Partner.


+ Request (application/json)

        {
            "name": "Northeastern University Service Learning Department"
        }

+ Response 201 (application/json)

    + Headers

            Location: /communityPartner/{communityPartner_id}

    + Body

            {
                "id": 00000,
                "name": "Northeastern University Service Learning Department"
            }
            
### Update a Community Partner [PUT]

Updates a Community Partner with the given fields.

+ Request (application/json)

        {
            "id": 00000,
            "name": "Northeastern University Service Learning Department"
        }

+ Response 200

## Record [/record/{record_id}]

### Get a Record [GET]

Takes a Record ID and returns the associated Record.

+ Request (application/json)

        {
            "id": 00000
        }

+ Response 200 (application/json)
       
        [
            {
                "id": 00000,
                "user": 00000,
                "course": 00000,
                "project": 00000,
                "start time": "2016-09-31 14:00:00",
                "total hourse": 2,
                "location": 
                    {
                        "latitude": 40.0,
                        "longitude": 40.0,
                    },
                "category": "Direct Service",
                "comments": "Did a good job.",
                "extraFields":
                    {
                        "example": "some info"
                    }
            }
        ]


### Create a new Record [POST]

You may create a new Record using this action. It takes a JSON
object containing a User ID, course, Course ID, Project ID, start time, total hours, 
a location (long/lat in JSON format)(optional), a category (Training/Direct Service), comments (optional), and any extra fields (optional).


+ Request (application/json)

        [
            {
                "user": 00000,
                "course": 00000,
                "project": 00000,
                "start time": "2016-09-31 14:00:00",
                "total hours": 2,
                "location": 
                    {
                        "latitude": 40.0,
                        "longitude": 40.0,
                    },
                "category": "Direct Service",
                "comments": "Did a good job.",
                "extraFields":
                    {
                        "example": "some info"
                    }
            }
        ]

+ Response 201 (application/json)

   + Headers

            Location: /record/{record_id}

   + Body

            {
                "id": 00000,
                "user": 00000,
                "course": 00000,
                "project": 00000,
                "start time": "2016-09-31 14:00:00",
                "total hourse": 2,
                "location": 
                    {
                        "latitude": 40.0,
                        "longitude": 40.0,
                    },
                "category": "Direct Service",
                "comments": "Did a good job.",
                "extraFields":
                    {
                        "example": "some info"
                    }
            }
            
### Update a Record [PUT]

Updates a Record with the given fields, must provide all fields.

+ Request (application/json)

        {
            "id": 00000,
            "user": 11111,
            "course": 00000,
            "project": 00000,
            "start time": "2016-09-31 16:00:00",
            "total hourse": 4,
            "location": 
                {
                    "latitude": 30.0,
                    "longitude": 30.0,
                },
            "category": "Direct Service",
            "comments": "Did a great job.",
            "extraFields":
                {
                    "example": "some info"
                }
        }

+ Response 200

### Delete a Record [DELETE]

Takes a Record ID and deletes that record.

+ Request (application/json)
        
        {
            "id": 00000,    
        }

+ Response 202