FORMAT: 1A
HOST: http://sl-timetracker.apiblueprint.org/

# SL-TimeTracker

Backend endpoints for the Service Learning Time Tracker project.

## Login [/user/login/]

### Login to an account [POST]

+ Request (application/json)

        {
            "username": "kename.f@husky.neu.edu",
            "password": "123456abc",
        }
        
+ Response 201 (application/json)

    + Headers

            Location: /user/login/

    + Body

            {
                "key": "8dc772f34177bd654bb8e70e3b22635004fb0de3",
            }
        
## Logout [/user/logout/]

### Logout an account [POST]

+ Request (application/json)

        {
            "token": "123123214214124123123",
        }
        
+ Response 201 (application/json)

    + Headers

            Location: /user/logout/

    + Body

            {
                "success": "Successfully logged out.",
            }


## New User [/user/registration/]

### Create a new User [POST]

You may create a new User using this action. It takes a JSON
object containing a first name, last name, a username (email address),
and two passwords (will reject if these are different).

Only accepts @husky.neu.edu, @neu.edu, and @northeastern.edu
domain email addresses. Users with @husky.neu.edu will be set
as `student` and all others will be set to the `instructor` role.

+ Request (application/json)

        {
            "first_name": "Fa",
            "last_name": "Kename",
            "username": "kename.f@husky.neu.edu",
            "password1": "123456abc",
            "password2": "123456abc",
        }

+ Response 201 (application/json)

    + Headers

            Location: /user/registration/

    + Body

            {
                "key": "8dc772f34177bd654bb8e70e3b22635004fb0de3",
            }

## Exisiting User [/users/{user_id}]

### Get User Information [GET]

Takes a User ID and returns the associated User.

+ Request (application/json)

        {
            "id": 99999,
        }

+ Response 200 (application/json)
       
        {
            "id": 99999,
            "first_name": "Fa",
            "last_name": "Kename",
            "username": "kename.f@husky.neu.edu",
            "role": "student",
            "courses": [
                "CS4500",
                "CS2500",
                "CS2510",
            ],
            "projects": [
                99999,
            ],
            "sections": [
                "12677",
            ],
            "is_active": true,
        }

### Update a User [PUT]

Updates a User with the given fields. Have to provide all the fields, provide exisiting data if there is no change.

+ Request (application/json)
        
        {
            "id": 99999,
            "first_name": "Fa",
            "last_name": "Kename",
            "username": "kename.f@husky.neu.edu",
            "role": "student",
            "courses": [
                "CS4500",
                "CS2500",
            ],
            "projects": [],
            "is_active": true,
        }

+ Response 200

## Current Logged in User [/me/]

### Get Current User [GET]

Returns the currently logged in User

+ Request

    + Headers

            Authorization: Token <token>

+ Response 200 (application/json)
       
        {
            "id": 99999,
            "first_name": "Fa",
            "last_name": "Kename",
            "username": "kename.f@husky.neu.edu",
            "role": "student",
            "courses": [
                "CS4500",
                "CS2500",
                "CS2510",
            ],
            "projects": [
                99999,
            ],
            "is_active": true,
        }

## Course Collection [/courses]

### Get all Courses [GET]

Returns ID:Name pairs of all existing courses.

+ Response 200 (application/json)

        {
            "ids": {
                "CS4800":  "Algorithms and Data"
                "CS2500":  "Fundamentals of Computer Science 1"
                "CS4500":  "Software Development"
            }
        }


   
## New Course [/course/]

### Create a new Course [POST]

You may create a new Course using this action. It takes a JSON 
object containing a course number, course name, and semester ID.

+ Request (application/json)

        {
            "id": "CS4500",
            "course_name": "Software Development",
        }
        
+ Response 201 (application/json)

    + Headers

            Location: /course/{course_id}

    + Body

            {
                "id": "CS4500",
                "course_name": "Software Development",
            }
            
   
## Existing Course [/course/{course_id}]

### Get Course Information [GET]

Takes a Course ID and returns the associated Course.

+ Request (application/json)

        {
            "id": "CS4500"
        }

+ Response 200 (application/json)
       
        {
            "id": "CS4500",
            "course_name": "Software Development"
        }

### Update a Course [PUT]

Updates a Course with the given fields, must provide all fields.

+ Request (application/json)

        {
            "id": "CS4500",
            "course_name": "Software Development",
        }

+ Response 200

## Course Instructors [/course/{course_id}/instructors]

### Get Instructors for a Course [GET]

Returns all instructors for a course


+ Request (application/json)

        {
            "id": "CS4500"
        }

+ Response 200 (application/json)
       
        {
            "id": "CS4500",
            "instructors": [
                {
                    "id": 99999,
                    "first_name": "Michael",
                    "last_name": "Weintraub"
                },
                {
                    "id": 11111,
                    "first_name": "Smitha",
                    "last_name": "Bangalore Naresh"
                }
            ]
        }

## Course Students [/course/{course_id}/students]

### Get Instructors for a Course [GET]

Returns all students for a course


+ Request (application/json)

        {
            "id": "CS4500"
        }

+ Response 200 (application/json)
       
        {
            "id": "CS4500",
            "students": [
                {
                    "id": 99999,
                    "first_name": "Fa",
                    "last_name": "Kename"
                },
                {
                    "id": 11111,
                    "first_name": "Fal",
                    "last_name": "Seid"
                }
            ]
        }

## Course Projects [/course/{course_id}/projects]

### Get Projects for a Course [GET]

Returns all Projects in a course. Takes a Course ID.


+ Request (application/json)

        {
            "id": "CS4500"
        }

+ Response 200 (application/json)
       
        {
            "id": "CS4500",
            "projects": [
                "99999": "Service-Learning Time Tracker",
            ]
        }

## Course Sections [/course/{course_id}/sections/]

### Get Course Sections [GET]

Get the sections of a course

+ Request (application/json)

        {
            "id": "CS4500"
        }
        
+ Response 200 (application/json)
       
        [
            {
                "professor":"Mike",
                "meeting_days":"MWR",
                "meeting_start_time":"23:23:00",
                "meeting_end_time":"23:23:00",
                "crn":"56323"
            }
        ]

## New Project [/project/]

### Create a new Project [POST]

You may create a new Project using this action. It takes a JSON
object containing a name, course, Community Partner ID, a description (optional), 
a start date, an end date, and longitude and latitude (both optional).

+ Request (application/json)

        {
            "name": "Service-Learning Time Tracker",
            "course": "CS4500",
            "community_partner": 99999,
            "description": "Creating a new system for tracking the hours worked by students doing service learning.",
            "start_date": "2016-09-01",
            "end_date": "2016-12-31",
            "longitude": 40.0,
            "latitude": 40.0,
        }

+ Response 201 (application/json)

    + Headers

            Location: /project/{project_id}

    + Body
    
            {
                "id": 99999,
                "name": "Service-Learning Time Tracker",
                "course": "CS4500",
                "community_partner": 99999,
                "description": "Creating a new system for tracking the hours worked by students doing service learning.",
                "start_date": "2016-09-01",
                "end_date": "2016-12-31",
                "longitude": 40.0,
                "latitude": 40.0,
            }

## Existing Project [/project/{project_id}]

### Get a Project [GET]

Takes a Project ID and returns the associated Project.

+ Request (application/json)

        {
            "id": 99999
        }

+ Response 200 (application/json)
       

        {
            "id": 99999,
            "name": "Service-Learning Time Tracker",
            "course": "CS4500",
            "community_partner": 99999,
            "description": "Creating a new system for tracking the hours worked by students doing service learning.",
            "start_date": "2016-09-01",
            "end_date": "2016-12-31",
            "longitude": 40.0,
            "latitude": 40.0,
        }

### Update a Project [PUT]

Updates a Project with the given fields, must provide all fields.

+ Request (application/json)

        {
            "id": 99999,
            "name": "Service-Learning Time Tracker",
            "course": "CS4500",
            "community_partner": 99999,
            "description": "Creating a new system for tracking the hours worked by students doing service learning. Some extra text here",
            "start_date": "2016-09-01",
            "end_date": "2016-12-31",
            "longitude": 40.0,
            "latitude": 40.0,
        }

+ Response 200

## All Students from a Project [/project/{project_id}/students]


### Get all Students who worked on a given Project ID [GET]

Takes a Project ID and returns the names and IDs of all students ever associated with that project

+ Request (application/json)

        {
            "id": 99999
        }

+ Response 200 (application/json)

        {
        "results":
            [
                { 
                    "first_name" : "Fa" 
                    "last_name" : "Kename"
                    "id" : 99999
                },
                { 
                    "first_name" : "Fals" 
                    "last_name" : "Eid"
                    "id" : 11111
                }
            ]
        }

## All Projects [/projects]

### Get All Projects [GET]

Returns ID:Name pairs for all existing projects

+ Response 200 (application/json)
       
        {
            "ids": {
                "99999": "Service-Learning Time Tracker",
                "11111": "Wediko"
            }
        }

## New Community Partner [/communityPartner/]

### Create a new Community Partner [POST]

You may create a new Community Partner using this action. It takes a JSON
object containing a name of a Community Partner.


+ Request (application/json)

        {
            "name": "Northeastern University Service Learning Department"
        }

+ Response 201 (application/json)

    + Headers

            Location: /communityPartner/{communityPartner_id}

    + Body

            {
                "id": 99999,
                "name": "Northeastern University Service Learning Department"
            }

## Existing Community Partner [/communityPartner/{communityPartner_id}]

### Get a Community Partner [GET]

Takes a Community Partner ID and returns the associated Community Partner.

+ Request (application/json)

        {
            "id": 99999
        }

+ Response 200 (application/json)
       

        {
            "id": 99999,
            "name": "Northeastern University Service Learning Department"
        }

### Update a Community Partner [PUT]

Updates a Community Partner with the given fields.

+ Request (application/json)

        {
            "id": 99999,
            "name": "Northeastern University Service Learning Department"
        }

+ Response 200

## Community Partner All Projects [/communityPartner/{communityPartner_id}/projects]

### Get All Projects for a Community Partner [GET]

Takes a Communtiy Partner ID and returns all Projects associated.

+ Request (application/json)

        {
            "id": 99999
        }

+ Response 200 (application/json)
       
        {
            "id": 99999,
            "name": "Northeastern University Service Learning Department"
            "projects": [
                99999,
                11111,
                22222,
                33333
            ]
        }


## Community Partner Active Projects [/communityPartner/{communityPartner_id}/projects/active]

### Get Active Projects for a Community Partner [GET]

Takes a Communtiy Partner ID and returns active Projects associated.

+ Request (application/json)

        {
            "id": 99999
        }

+ Response 200 (application/json)
       
        {
            "id": 99999,
            "name": "Northeastern University Service Learning Department"
            "projects": [
                22222,
                33333
            ]
        }

## New Record [/record/]

### Create a new Record [POST]

You may create a new Record using this action. It takes a JSON
object containing a Enrollment ID, Project ID, date, start time (optional), total hours, 
a location (long/lat in JSON format)(optional), a category (Training/Direct Service), is_active (default True),
comments (optional), and any extra fields (optional).


+ Request (application/json)

        {
            "enrollment": 99999,
            "project": 99999,
            "date": "2016-09-31",
            "start_time": "14:00",
            "total_hours": 2,
            "longitude": 40.0,
            "latitude": 40.0,
            "category": "Direct Service",
            "is_active": True,
            "comments": "Did a good job.",
            "extraFields":
                {
                   "example": "some info"
                }
        }


+ Response 201 (application/json)

  + Headers

            Location: /record/{record_id}

  + Body

            {
                "id": 99999,
                "enrollment": 99999,
                "project": 99999,
                "date": "2016-09-31",
                "start_time": "14:00",
                "total_hours": 2,
                "longitude": 40.0,
                "latitude": 40.0,
                "category": "Direct Service",
                "is_active": True,
                "comments": "Did a good job.",
                "extraFields":
                    {
                       "example": "some info"
                    }
            }

## Existing Record [/record/{record_id}]

### Get a Record [GET]

Takes a Record ID and returns the associated Record.

+ Request (application/json)

        {
           "id": 99999
        }

+ Response 200 (application/json)
      
           {
            "id": 99999,
            "enrollment": 99999,
            "project": 99999,
            "date": "2016-09-31",
            "start_time": "14:00",
            "total_hours": 2,
            "longitude": 40.0,
            "latitude": 40.0,
            "category": "Direct Service",
            "is_active": True,
            "comments": "Did a good job.",
            "extraFields":
                {
                   "example": "some info"
                }
        }

### Update a Record [PUT]

Update a Record with the given fields, must enter all the fields:
-- Sets the current record being referenced by id (is_active) to False
-- Creates the new record with given parameters
+ Request (application/json)

            {
                "id": 99999,
                "enrollment": 99999,
                "project": 99999,
                "date": "2016-09-31",
                "start_time": "14:00",
                "total_hours": 2,
                "longitude": 40.0,
                "latitude": 40.0,
                "category": "Direct Service",
                "is_active": True,
                "comments": "Did a good job.",
                "extraFields":
                    {
                       "example": "some info"
                    }
           }

+ Response 200



## All Records [/record/all]

### Get all Records [GET]

Returns all record IDs. Assumes forever if no range is given.


+ Request (application/json)

        {
           "start_date": "2016-09-01",
           "end_date": "2016-12-31",
        }

+ Response 200 (application/json)
      
        {
           "record_IDs": [
               11111,
               22222,
               33333,
               44444
           ]
        }


## User Records [/record/user/{user_id}]

### Get all Records for a User [GET]

Takes a User ID and returns all Records for that User.

+ Request (application/json)

        {
            "id": 99999
        }

+ Response 200 (application/json)
       

        {
            "record_IDs": [
                11111,
                22222,
                33333,
                44444
            ]
        }


## Course Records [/record/course/{course_id}]

### Get all Records for a Course [GET]

Takes a Course ID and returns all Records for that Course.

+ Request (application/json)

        {
            "id": "CS4500"
        }

+ Response 200 (application/json)
       

        {
            "record_IDs": [
                11111,
                22222,
                33333,
                44444
            ]
        }


## Project Records [/record/project/{project_id}]

### Get all Records for a Project [GET]

Takes a Project ID and returns all Records for that Project.

+ Request (application/json)

        {
            "id": 99999
        }

+ Response 200 (application/json)
       

        {
            "record_IDs": [
                11111,
                22222,
                33333,
                44444
            ]
        }
        
## Export All Records to CSV [/record/exportall/]

### Get all records in CSV form [GET]

+ Response 200 (text/csv)

## Hours for User ID [/record/hours/user/{user_id}]

### Get all hours for a given User ID [GET]

Takes a User ID and returns their total recorded hours for the given time range. Assumes forever if no range is given.

+ Request (application/json)

        {
            "id": 99999,
            "start_date": "2016-09-01",
            "end_date": "2016-12-31",
        }

+ Response 200 (application/json)
       
        {
            "hours": 55,
        }

## Hours for Project ID [/record/hours/project/{project_id}]

### Get all hours for a given Project ID [GET]

Takes a Project ID and returns their total recorded hours for the given time range. Assumes forever if no range is given.

+ Request (application/json)

        {
            "id": 99999,
            "start_date": "2016-09-01",
            "end_date": "2016-12-31",
        }

+ Response 200 (application/json)
       
        {
            "hours": 550,
        }


## Hours for Course ID [/record/hours/course/{course_id}]

### Get all hours for a given Course ID [GET]

Takes a Course ID and returns the total recorded hours for the given time range. Assumes forever if no range is given.

+ Request (application/json)

        {
            "id": "CS4500",
            "start_date": "2016-09-01",
            "end_date": "2016-12-31",
        }

+ Response 200 (application/json)

        {
            "hours": 200,
        }


## New Semester [/semester/]

### Create a new Semester [POST]

You may create a new Semester using this action. It takes a JSON
object containing a name, start date, end date, and is active boolean.

Must be an admin to call this endpoint.

+ Request (application/json)

        {
            "name": "Fall 2018",
            "start_date": "2018-09-01",
            "end_date": "2018-12-31",
            "is_active": false
        }

+ Response 201 (application/json)

    + Headers

            Location: /communityPartner/{communityPartner_id}

    + Body

            {
                "name": "Fall 2018",
                "start_date": "2018-09-01",
                "end_date": "2018-12-31",
                "is_active": false
            }

## Existing Semester [/semester/{semester_id}]

### Get a Semester [GET]

Takes a Semester ID and returns that semester.

+ Request (application/json)

        {
            "id": 99999,
        }

+ Response 200 (application/json)

        {
            "id": 99999,
            "name": "Fall 2016",
            "start_date": "2016-09-01",
            "end_date": "2016-12-31",
            "is_active": true,
        }

### Update a Semester [PUT]

Updates a Semester with the given fields.

+ Request (application/json)

        {
            "id": 99999,
            "name": "Fall 2019",
            "start_date": "2019-09-01",
            "end_date": "2019-12-31",
            "is_active": false
        }

+ Response 200

## Start Next Semester [/semester/startnext]

### Start the next semester [POST]

Deactivates all current courses and enrollments, activates all course and enrollments for the following semester.

Must be an admin to call this endpoint.

+ Response 200 (application/json)

## Enroll a User in a Section [/enroll/]

### Enroll Student [POST]

Enrolls a User in a section of a Course

+ Request (application/json)

        {
            "user_id": 99999,
            "course_id": "CS4500",
            "semester_name": "FALL2016",
            "meeting_days": "MWF",
            "start_time": "9:50:00",
            "end_time": "11:30:00",
            "project": 99999,
            "CRN": "99999",
            "is_active": true
        }

+ Response 201 (application/json)

    + Headers

            Location: /enroll/{enrollment_id}

    + Body

            {
                "id": 99999,
                "user_id": 99999,
                "course_id": "CS4500",
                "semester_name": "FALL2016",
                "meeting_days": "MWF",
                "start_time": "9:50:00",
                "end_time": "11:30:00",
                "project": 99999,
                "CRN": "99999",
                "is_active": true
            }
            
## Enrollments [/enrollments/]

### Get all enrollments [GET]

Get all enrollments.

+ Response 200 (application/json)

        [
            {
                "user": 25,
                "course": "CS4500",
                "semester": "FALL2016",
                "is_active": false,
                "crn": "56323",
                "meeting_days": "MWR",
                "meeting_start_time": "23:23:54.304023",
                "meeting_end_time": "23:23:54.204104"
            },
            {
                "user": 3,
                "course": "CS1200",
                "semester": "SPRING2017",
                "is_active": false,
                "crn": "44221",
                "meeting_days": "MWR",
                "meeting_start_time": "23:23:54.304023",
                "meeting_end_time": "23:23:54.204104"
            },
        ]
        
## Enrollments Course [/enrollments/{course_name}/]

### Get all active enrollments associated with given course [GET]

Given a course name, retrieve all active enrollments associated with the given course.

+ Response 200 (application/json)

        [
            {
                "user": 8,
                "course": "CS4500",
                "semester": "FALL2016",
                "is_active": true,
                "crn": "56323",
                "meeting_days": "MWR",
                "meeting_start_time": "23:23:54.304023",
                "meeting_end_time": "23:23:54.204104"
            },
            {
                "user": 3,
                "course": "CS4500",
                "semester": "FALL2016",
                "is_active": true,
                "crn": "56323",
                "meeting_days": "MWR",
                "meeting_start_time": "23:23:54.304023",
                "meeting_end_time": "23:23:54.204104"
            }
        ]
        
## Enrollments CRN [/enrollments/crn/{crn}/]

### Get all active enrollments associated with given CRN [GET]

Given a course CRN, retrieve all active enrollments associated with the given course.

+ Response 200 (application/json)

        [
            {
                "user": 8,
                "course": "CS4500",
                "semester": "FALL2016",
                "is_active": true,
                "crn": "56323",
                "meeting_days": "MWR",
                "meeting_start_time": "23:23:54.304023",
                "meeting_end_time": "23:23:54.204104"
            },
            {
                "user": 3,
                "course": "CS4500",
                "semester": "FALL2016",
                "is_active": true,
                "crn": "56323",
                "meeting_days": "MWR",
                "meeting_start_time": "23:23:54.304023",
                "meeting_end_time": "23:23:54.204104"
            }
        ]